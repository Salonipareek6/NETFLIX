# -*- coding: utf-8 -*-
"""Copy of Welcome To Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gNFRsOvc7MyST-BwqZlCurR_j-gY5AP5
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import drive
drive.mount('/content/drive')

data = pd.read_csv('data.csv')
data

data.info()

unique_release_years = sorted(data['releaseYear'].unique())
unique_release_years

plt.figure(figsize=(20, 8))
sns.countplot(x='releaseYear', data=data)
plt.title('Distribution of Release Years')
plt.xlabel('Release Year')
plt.ylabel('Number of Movies')
plt.xticks(rotation=90, ha='right')
plt.legend()
plt.tight_layout()
plt.show()

mtype = sorted(data['type'].unique())
mtype



data['genres'] = data['genres'].astype(str)
data['genres'] = data['genres'].str.strip().str.lower()
unique_genres = sorted(data['genres'].unique())
unique_genres

# dict for store the count of each genre
genre_counts = {}
for genres in data['genres']:
    for genre in genres.split(','):
        genre = genre.strip()
        if genre in genre_counts:
            genre_counts[genre] += 1
        else:
            genre_counts[genre] = 1


# the dict to a DataFrame for easier plotting
genre_df = pd.DataFrame({'Genre': list(genre_counts.keys()), 'Count': list(genre_counts.values())})

# sorting in desc.order
genre_df = genre_df.sort_values('Count', ascending=False)
plt.figure(figsize=(20, 10))
sns.barplot(x='Genre', y='Count', data=genre_df, palette='viridis')
plt.title('Distribution of Genres')
plt.xlabel('Genre')
plt.ylabel('Number of Movies')
plt.xticks(rotation=90, ha='right')
plt.tight_layout()
plt.show()
#pie chart of the top 10 genres
top_10_genres = genre_df.head(10)
plt.figure(figsize=(5, 5))
plt.pie(top_10_genres['Count'], labels=top_10_genres['Genre'], autopct='%1.1f%%', startangle=90, colors=sns.color_palette('pastel'), explode=(0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0))
plt.title('Top 10 Genres')
plt.axis('equal')  # tho yhe equal aspect ratio ensures that pie is drawn as a circle #explode for slice a part of pie
plt.show()

genre_ratings = data.groupby('genres')['imdbAverageRating'].agg(['mean', 'max', 'min'])
# max rating
max_avg_rating_genre = genre_ratings['mean'].idxmax()
max_avg_rating = genre_ratings['mean'].max()
# Find the genre with the minimum average IMDb rating
min_avg_rating_genre = genre_ratings['mean'].idxmin()
min_avg_rating = genre_ratings['mean'].min()
# now guys result
print(f"Genre with the maximum average IMDb rating: {max_avg_rating_genre} ({max_avg_rating:.2f})")
print(f"Genre with the minimum average IMDb rating: {min_avg_rating_genre} ({min_avg_rating:.2f})")
#genre with the maximum IMDb rating
max_rating_genre = genre_ratings['max'].idxmax()
max_rating = genre_ratings['max'].max()
#genre with the minimum IMDb rating
min_rating_genre = genre_ratings['min'].idxmin()
min_rating = genre_ratings['min'].min()

print(f"Genre with the maximum IMDb rating: {max_rating_genre} ({max_rating:.2f})")
print(f"Genre with the minimum IMDb rating: {min_rating_genre} ({min_rating:.2f})")

data.info()

type_counts = data['type'].value_counts()
most_watched_type = type_counts.idxmax()
print(f"The most watched type is: {most_watched_type}")

type_ratings = data.groupby('type')['imdbAverageRating'].mean()
#pie chart
plt.figure(figsize=(4, 4))
colors = ['blue' if rating >= type_ratings.mean() else 'cyan' for rating in type_ratings]
plt.pie(type_ratings, labels=type_ratings.index, autopct='%1.1f%%', startangle=90, colors=colors)
plt.title('Average IMDb Rating by Type')
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show()

unique_url_count = data['url'].nunique()
print(f"Total unique URLs in the 'url' column: {unique_url_count}")

# replace NaN values with 0
for index, row in data.iterrows():
  if pd.isnull(row['imdbAverageRating']):
    data.loc[index, 'imdbAverageRating'] = 0
data

sorted_data = data.sort_values('imdbAverageRating', ascending=False)
print(sorted_data[['title', 'imdbAverageRating']])







